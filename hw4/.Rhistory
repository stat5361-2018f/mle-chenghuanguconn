knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma)
require(ggplot2)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
require(ggplot2)
start <- seq(-10, 20, by=0.5)
# newton.method require(animation)
# newtonRaphson require(pracma)
llk.1st <- function(x) {
-2 * sum((x - data.cauchy)/(1 + (x - data.cauchy) ^ 2))
}
l1 <- Vectorize(llk.1st)
curve(l1, 0, 10, xname = 'loc')
knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma)
require(ggplot2)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma)
require(ggplot2)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
set.seed(20180909)
n <- 10
par.loc <- 5
data.cauchy <- rcauchy(n, location = par.loc)
llk <- function(loc) {
sum(dcauchy(data.cauchy,
location = loc,
log = TRUE))
}
loglikelihood <- Vectorize(llk)
curve(loglikelihood, -20, 20, xname = 'loc')
knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma)
require(ggplot2)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
loglkh <- function(theta){
sum(log((1 - cos(x - theta))/(2 * pi), base = exp(1)))
}
loglikelihood <- Vectorize(llk)
curve(loglikelihood, -pi, pi, xname = 'theta')
## some utility functions, see the source code for details
source("utils_template.R")
## specify the packages needed
pkgs <- c("DT", "leaflet", "splines2", "webshot")
need.packages(pkgs)
## external data can be read in by regular functions,
## such as read.table or load
## for latex and html output
isHtml <- knitr::is_html_output()
isLatex <- knitr::is_latex_output()
latex <- ifelse(isLatex, '\\LaTeX\\', 'LaTeX')
## specify global chunk options
knitr::opts_chunk$set(fig.width = 5, fig.height = 4, dpi = 300,
out.width = "90%", fig.align = "center")
##' define the loglikelihood function
loglik.my0 <- function(theta, sample) {
n <- length(sample)
if (sum(sample >=0 & sample <= 2*pi) < n) {
print("sample is out of range")
} else if(theta < -pi | theta > pi) {
print("theta is out of range")
} else {
l <- sum(log(1-cos(sample-theta))) - n * log(2*pi)
return(l)
}
}
loglik.my <- function(theta, sample) {
l <- sapply(theta, FUN = loglik.my0, sample = sample)
l
}
s <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
curve(loglik.my(x, sample = s), -pi, pi)
loglkh <- function(theta){
n <- length(x)
sum(log((1 - cos(x - theta)), base = exp(1)))-- n * log(2*pi)
}
loglikelihood <- Vectorize(llk)
curve(loglikelihood, -pi, pi, xname = 'theta')
loglkh <- function(theta){
n <- length(x)
sum(log((1 - cos(x - theta)), base = exp(1)))- n * log(2*pi)
}
loglikelihood <- Vectorize(llk)
curve(loglikelihood, -pi, pi, xname = 'theta')
loglkh <- function(theta){
n <- length(x)
sum(log((1 - cos(x - theta))/(2 * pi), base = exp(1)))
}
loglikelihood <- Vectorize(loglkh)
curve(loglikelihood, -pi, pi, xname = 'theta')
mean(x)
asin(mean(x)-pi)
knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma) #NR
require(ggplot2)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
mean(x)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
newtonRaphson(loglkh, asin(mean(x)-pi), dfun = NULL, ..., maxiter = 100, tol = .Machine$double.eps^0.5)
newtonRaphson(loglkh, asin(mean(x)-pi), dfun = NULL)
library(pracma)
theta_0 <- asin(mean(s) - pi)
##' define derivitive of log-likelihood function
dev.loglik0 <- function(theta, sample) {
dev.l <- sum(sin(theta-sample)/(1-cos(theta-sample)))
dev.l
}
dev.loglik <- function(theta, sample) {
dev.l <- sapply(theta, FUN = dev.loglik0, sample = sample)
}
x1 <- newtonRaphson(fun = dev.loglik, x0 = theta_0, sample = s)$root
x2 <- newtonRaphson(fun = dev.loglik, x0 = -2.7, sample = s)$root
x3 <- newtonRaphson(fun = dev.loglik, x0 = 2.7, sample = s)$root
x1
x2
x3
newtonRaphson(loglkh.1, asin(mean(x)-pi), dfun = NULL)
loglkh.1 <- function(theta){
sum(sin(theta-x)/(1-cos(theta-x)))
}
newtonRaphson(loglkh.1, asin(mean(x)-pi), dfun = NULL)
newtonRaphson(loglkh.1, asin(mean(x)-pi), dfun = NULL)$root
newtonRaphson(loglkh.1, -2.7, dfun = NULL)$root
newtonRaphson(loglkh.1, 2.7, dfun = NULL)$root
start <- seq(-pi, pi, length.out = 200)
nr <- double(200)
for (i in start){
nr(which(start == i)) <- newtonRaphson(loglkh.1, i, dfun = NULL)$root
}
start <- seq(-pi, pi, length.out = 200)
nr <- double(200)
for (i in start){
nr(which(start == i)) <- newtonRaphson(loglkh.1, i, dfun = NULL)$root
}
start <- seq(-pi, pi, length.out = 200)
nr <- double(200)
for (i in start){
nr(which(start == i)) = newtonRaphson(loglkh.1, i, dfun = NULL)$root
}
start <- seq(-pi, pi, length.out = 200)
nr <- double(200)
for (i in start){
nr[which(start == i)] <- newtonRaphson(loglkh.1, i, dfun = NULL)$root
}
nr
nrtble
nrtble <- data.table(start = start, MLE = nr)
nrtble
data.table(cn = names(nrtble), transpose(nrtble))
start <- seq(-pi, pi, length.out = 200)
nr <- double(200)
for (i in start){
nr[which(start == i)] <- newtonRaphson(loglkh.1, i, dfun = NULL)$root
}
nrtble <- data.table(start = start, MLE = nr)
data.table(cn = names(nrtble), transpose(nrtble))
newtonRaphson(loglkh.1, -2.7, dfun = NULL)$root
newtonRaphson(loglkh.1, 2.7, dfun = NULL)$root
asin(mean(x)-pi)
loglkh.1 <- function(theta){
sum(sin(theta-x)/(1-cos(theta-x)))
}
newtonRaphson(loglkh.1, asin(mean(x)-pi), dfun = NULL)$root
knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma) #NR
require(ggplot2)
x <- c(3.91, 4.85, 2.28, 4.06, 3.70, 4.04, 5.46, 3.53, 2.28, 1.96,
2.53, 3.88, 2.22, 3.47, 4.82, 2.46, 2.99, 2.54, 0.52)
mean(x)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
loglkh <- function(theta){
sum(log((1 - cos(x - theta))/(2 * pi), base = exp(1)))
}
loglikelihood <- Vectorize(loglkh)
curve(loglikelihood, -pi, pi, xname = 'theta')
beetles <- data.frame(
days    = c(0,  8,  28,  41,  63,  69,   97, 117,  135,  154),
beetles = c(2, 47, 192, 256, 768, 896, 1120, 896, 1184, 1024))
